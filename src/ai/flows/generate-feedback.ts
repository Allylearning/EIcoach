'use server';
/**
 * @fileOverview Generates personalized feedback based on user input, referencing model answers more comprehensively.
 *
 * - generateFeedback - A function that generates personalized feedback.
 * - GenerateFeedbackInput - The input type for the generateFeedback function.
 * - GenerateFeedbackOutput - The return type for the GenerateFeedback function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';

const GenerateFeedbackInputSchema = z.object({
  currentQuestion: z.string().describe('The current question being answered.'),
  userInput: z.string().describe('The user\u2019s response to the question.'),
  modelAnswer: z.string().describe('The model answer for the question.'),
});
export type GenerateFeedbackInput = z.infer<typeof GenerateFeedbackInputSchema>;

const GenerateFeedbackOutputSchema = z.object({
  feedback: z.string().describe('The personalized feedback generated by the AI.'),
});
export type GenerateFeedbackOutput = z.infer<typeof GenerateFeedbackOutputSchema>;

export async function generateFeedback(input: GenerateFeedbackInput): Promise<GenerateFeedbackOutput> {
  try {
    return await generateFeedbackFlow(input);
  } catch (error) {
    console.warn('‚ö†Ô∏è generateFeedbackFlow failed, using fallback response.', error);
    return {
      feedback: `Thanks for your answer! You might also consider: ${input.modelAnswer} üòä`,
    };
  }
}

const prompt = ai.definePrompt({
  name: 'generateFeedbackPrompt',
  input: {
    schema: z.object({
      currentQuestion: z.string().describe('The current question being answered.'),
      userInput: z.string().describe('The user\u2019s response to the question.'),
      modelAnswer: z.string().describe('The model answer for the question.'),
    }),
  },
  output: {
    schema: z.object({
      feedback: z.string().describe('The personalized feedback generated by the AI.'),
    }),
  },
  prompt: `You are an expert coach, providing emotionally supportive feedback to an athlete, helping them reflect on their emotional intelligence. Here's their response to a question:

Question: {{currentQuestion}}

User's response: {{userInput}}

Give them supportive feedback in UK ENGLISH. Be non-judgemental, empathetic, and encouraging. Highlight what they're doing well. Offer thoughtful suggestions drawing from the following insights:

{{modelAnswer}}

Use simple language and include at most one emoji to convey warmth and understanding ‚öΩ. Limit yourself to a maximum of 1 emoji. Do not ask any further questions to the user. Each interaction should be isolated feedback. Do not use overly casual language. Never use the word 'mate'. Ensure that your feedback covers as many of the points in the provided insights as possible.`,
});

const generateFeedbackFlow = ai.defineFlow<
  typeof GenerateFeedbackInputSchema,
  typeof GenerateFeedbackOutputSchema
>(
  {
    name: 'generateFeedbackFlow',
    inputSchema: GenerateFeedbackInputSchema,
    outputSchema: GenerateFeedbackOutputSchema,
  },
  async input => {
    const { output } = await prompt(input);
    return output!;
  }
);
